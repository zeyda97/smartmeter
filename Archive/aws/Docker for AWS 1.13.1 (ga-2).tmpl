{
    "AWSTemplateFormatVersion": "2010-09-09", 
    "Conditions": {
        "CreateLogResources": {
            "Fn::Equals": [
                {
                    "Ref": "EnableCloudWatchLogs"
                }, 
                "yes"
            ]
        }, 
        "HasOnly2AZs": {
            "Fn::Equals": [
                {
                    "Fn::FindInMap": [
                        "AWSRegion2AZ", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "NumAZs"
                    ]
                }, 
                "2"
            ]
        }
    }, 
    "Description": "Docker for AWS 1.13.1 (ga-2)", 
    "Mappings": {
        "AWSInstanceType2Arch": {
            "c3.2xlarge": {
                "Arch": "HVM64"
            }, 
            "c3.4xlarge": {
                "Arch": "HVM64"
            }, 
            "c3.8xlarge": {
                "Arch": "HVM64"
            }, 
            "c3.large": {
                "Arch": "HVM64"
            }, 
            "c3.xlarge": {
                "Arch": "HVM64"
            }, 
            "c4.2xlarge": {
                "Arch": "HVM64"
            }, 
            "c4.4xlarge": {
                "Arch": "HVM64"
            }, 
            "c4.8xlarge": {
                "Arch": "HVM64"
            }, 
            "c4.large": {
                "Arch": "HVM64"
            }, 
            "c4.xlarge": {
                "Arch": "HVM64"
            }, 
            "cc2.8xlarge": {
                "Arch": "HVM64"
            }, 
            "cr1.8xlarge": {
                "Arch": "HVM64"
            }, 
            "d2.2xlarge": {
                "Arch": "HVM64"
            }, 
            "d2.4xlarge": {
                "Arch": "HVM64"
            }, 
            "d2.8xlarge": {
                "Arch": "HVM64"
            }, 
            "d2.xlarge": {
                "Arch": "HVM64"
            }, 
            "g2.2xlarge": {
                "Arch": "HVMG2"
            }, 
            "hi1.4xlarge": {
                "Arch": "HVM64"
            }, 
            "hs1.8xlarge": {
                "Arch": "HVM64"
            }, 
            "i2.2xlarge": {
                "Arch": "HVM64"
            }, 
            "i2.4xlarge": {
                "Arch": "HVM64"
            }, 
            "i2.8xlarge": {
                "Arch": "HVM64"
            }, 
            "i2.xlarge": {
                "Arch": "HVM64"
            }, 
            "m3.2xlarge": {
                "Arch": "HVM64"
            }, 
            "m3.large": {
                "Arch": "HVM64"
            }, 
            "m3.medium": {
                "Arch": "HVM64"
            }, 
            "m3.xlarge": {
                "Arch": "HVM64"
            }, 
            "m4.10xlarge": {
                "Arch": "HVM64"
            }, 
            "m4.2xlarge": {
                "Arch": "HVM64"
            }, 
            "m4.4xlarge": {
                "Arch": "HVM64"
            }, 
            "m4.large": {
                "Arch": "HVM64"
            }, 
            "m4.xlarge": {
                "Arch": "HVM64"
            }, 
            "r3.2xlarge": {
                "Arch": "HVM64"
            }, 
            "r3.4xlarge": {
                "Arch": "HVM64"
            }, 
            "r3.8xlarge": {
                "Arch": "HVM64"
            }, 
            "r3.large": {
                "Arch": "HVM64"
            }, 
            "r3.xlarge": {
                "Arch": "HVM64"
            }, 
            "t2.2xlarge": {
                "Arch": "HVM64"
            }, 
            "t2.large": {
                "Arch": "HVM64"
            }, 
            "t2.medium": {
                "Arch": "HVM64"
            }, 
            "t2.micro": {
                "Arch": "HVM64"
            }, 
            "t2.small": {
                "Arch": "HVM64"
            }, 
            "t2.xlarge": {
                "Arch": "HVM64"
            }
        }, 
        "AWSRegion2AZ": {
            "ap-northeast-1": {
                "AZ0": "0", 
                "AZ1": "1", 
                "AZ2": "0", 
                "Name": "Tokyo", 
                "NumAZs": "2"
            }, 
            "ap-northeast-2": {
                "AZ0": "0", 
                "AZ1": "1", 
                "AZ2": "0", 
                "Name": "Seoul", 
                "NumAZs": "2"
            }, 
            "ap-south-1": {
                "AZ0": "0", 
                "AZ1": "1", 
                "AZ2": "0", 
                "Name": "Mumbai", 
                "NumAZs": "2"
            }, 
            "ap-southeast-1": {
                "AZ0": "0", 
                "AZ1": "1", 
                "AZ2": "0", 
                "Name": "Singapore", 
                "NumAZs": "2"
            }, 
            "ap-southeast-2": {
                "AZ0": "0", 
                "AZ1": "1", 
                "AZ2": "2", 
                "Name": "Sydney", 
                "NumAZs": "3"
            }, 
            "ca-central-1": {
                "AZ0": "0", 
                "AZ1": "1", 
                "AZ2": "0", 
                "Name": "Central", 
                "NumAZs": "2"
            }, 
            "eu-central-1": {
                "AZ0": "0", 
                "AZ1": "1", 
                "AZ2": "0", 
                "Name": "Frankfurt", 
                "NumAZs": "2"
            }, 
            "eu-west-1": {
                "AZ0": "0", 
                "AZ1": "1", 
                "AZ2": "2", 
                "Name": "Ireland", 
                "NumAZs": "3"
            }, 
            "eu-west-2": {
                "AZ0": "0", 
                "AZ1": "1", 
                "AZ2": "0", 
                "Name": "London", 
                "NumAZs": "2"
            }, 
            "sa-east-1": {
                "AZ0": "0", 
                "AZ1": "1", 
                "AZ2": "2", 
                "Name": "Sao Paulo", 
                "NumAZs": "3"
            }, 
            "us-east-1": {
                "AZ0": "0", 
                "AZ1": "1", 
                "AZ2": "2", 
                "Name": "N. Virgina", 
                "NumAZs": "4"
            }, 
            "us-east-2": {
                "AZ0": "0", 
                "AZ1": "1", 
                "AZ2": "2", 
                "Name": "Ohio", 
                "NumAZs": "3"
            }, 
            "us-west-1": {
                "AZ0": "0", 
                "AZ1": "1", 
                "AZ2": "0", 
                "Name": "N. California", 
                "NumAZs": "2"
            }, 
            "us-west-2": {
                "AZ0": "0", 
                "AZ1": "1", 
                "AZ2": "2", 
                "Name": "Oregon", 
                "NumAZs": "3"
            }
        }, 
        "AWSRegionArch2AMI": {
            "ap-northeast-1": {
                "HVM64": "ami-629fdc05", 
                "HVMG2": "NOT_SUPPORTED"
            }, 
            "ap-northeast-2": {
                "HVM64": "ami-fb924295", 
                "HVMG2": "NOT_SUPPORTED"
            }, 
            "ap-south-1": {
                "HVM64": "ami-57a7d638", 
                "HVMG2": "NOT_SUPPORTED"
            }, 
            "ap-southeast-1": {
                "HVM64": "ami-cae057a9", 
                "HVMG2": "NOT_SUPPORTED"
            }, 
            "ap-southeast-2": {
                "HVM64": "ami-6e6c6d0d", 
                "HVMG2": "NOT_SUPPORTED"
            }, 
            "ca-central-1": {
                "HVM64": "ami-59a9143d", 
                "HVMG2": "NOT_SUPPORTED"
            }, 
            "eu-central-1": {
                "HVM64": "ami-3616de59", 
                "HVMG2": "NOT_SUPPORTED"
            }, 
            "eu-west-1": {
                "HVM64": "ami-f81e3a9e", 
                "HVMG2": "NOT_SUPPORTED"
            }, 
            "eu-west-2": {
                "HVM64": "ami-0b64716f", 
                "HVMG2": "NOT_SUPPORTED"
            }, 
            "sa-east-1": {
                "HVM64": "ami-c42c4ba8", 
                "HVMG2": "NOT_SUPPORTED"
            }, 
            "us-east-1": {
                "HVM64": "ami-ed4c8dfb", 
                "HVMG2": "NOT_SUPPORTED"
            }, 
            "us-east-2": {
                "HVM64": "ami-831a3fe6", 
                "HVMG2": "NOT_SUPPORTED"
            }, 
            "us-west-1": {
                "HVM64": "ami-d36d31b3", 
                "HVMG2": "NOT_SUPPORTED"
            }, 
            "us-west-2": {
                "HVM64": "ami-bf0782df", 
                "HVMG2": "NOT_SUPPORTED"
            }
        }, 
        "DockerForAWS": {
            "version": {
                "channel": "stable", 
                "docker": "1.13.1", 
                "forAws": "aws-v1.13.1-ga-2"
            }
        }, 
        "VpcCidrs": {
            "pubsubnet1": {
                "cidr": "172.31.0.0/20"
            }, 
            "pubsubnet2": {
                "cidr": "172.31.16.0/20"
            }, 
            "pubsubnet3": {
                "cidr": "172.31.32.0/20"
            }, 
            "pubsubnet4": {
                "cidr": "172.31.48.0/20"
            }, 
            "vpc": {
                "cidr": "172.31.0.0/16"
            }
        }
    }, 
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Swarm Size"
                    }, 
                    "Parameters": [
                        "ManagerSize", 
                        "ClusterSize"
                    ]
                }, 
                {
                    "Label": {
                        "default": "Swarm Properties"
                    }, 
                    "Parameters": [
                        "KeyName", 
                        "EnableSystemPrune", 
                        "EnableCloudWatchLogs"
                    ]
                }, 
                {
                    "Label": {
                        "default": "Swarm Manager Properties"
                    }, 
                    "Parameters": [
                        "ManagerInstanceType", 
                        "ManagerDiskSize", 
                        "ManagerDiskType"
                    ]
                }, 
                {
                    "Label": {
                        "default": "Swarm Worker Properties"
                    }, 
                    "Parameters": [
                        "InstanceType", 
                        "WorkerDiskSize", 
                        "WorkerDiskType"
                    ]
                }
            ], 
            "ParameterLabels": {
                "ClusterSize": {
                    "default": "Number of Swarm worker nodes?"
                }, 
                "EnableCloudWatchLogs": {
                    "default": "Use Cloudwatch for container logging?"
                }, 
                "EnableSystemPrune": {
                    "default": "Enable daily resource cleanup?"
                }, 
                "InstanceType": {
                    "default": "Agent worker instance type?"
                }, 
                "KeyName": {
                    "default": "Which SSH key to use?"
                }, 
                "ManagerDiskSize": {
                    "default": "Manager ephemeral storage volume size?"
                }, 
                "ManagerDiskType": {
                    "default": "Manager ephemeral storage volume type"
                }, 
                "ManagerInstanceType": {
                    "default": "Swarm manager instance type?"
                }, 
                "ManagerSize": {
                    "default": "Number of Swarm managers?"
                }, 
                "WorkerDiskSize": {
                    "default": "Worker ephemeral storage volume size?"
                }, 
                "WorkerDiskType": {
                    "default": "Worker ephemeral storage volume type"
                }
            }
        }
    }, 
    "Outputs": {
        "DefaultDNSTarget": {
            "Description": "Use this name to update your DNS records", 
            "Value": {
                "Fn::GetAtt": [
                    "ExternalLoadBalancer", 
                    "DNSName"
                ]
            }
        }, 
        "Managers": {
            "Description": "You can see the manager nodes associated with this cluster here.  Follow the instructions here: https://beta.docker.com/docs/deploy/", 
            "Value": {
                "Fn::Join": [
                    "", 
                    [
                        "https://", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        ".console.aws.amazon.com/ec2/v2/home?region=", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "#Instances:tag:aws:autoscaling:groupName=", 
                        {
                            "Ref": "ManagerAsg"
                        }, 
                        ";sort=desc:dnsName"
                    ]
                ]
            }
        }, 
        "ZoneAvailabilityComment": {
            "Description": "Availabilty Zones Comment", 
            "Value": {
                "Fn::If": [
                    "HasOnly2AZs", 
                    "This region only has 2 Availabiliy Zones (AZ). If one of those AZs goes away, it will cause problems for your Swarm Managers. Please use a Region with at least 3 AZs.", 
                    "This region has at least 3 Availability Zones (AZ). This is ideal to ensure a fully functional Swarm in case you lose an AZ."
                ]
            }
        }
    }, 
    "Parameters": {
        "ClusterSize": {
            "Default": "5", 
            "Description": "Number of worker nodes in the Swarm (0-1000).", 
            "MaxValue": "1000", 
            "MinValue": "0", 
            "Type": "Number"
        }, 
        "EnableCloudWatchLogs": {
            "AllowedValues": [
                "no", 
                "yes"
            ], 
            "Default": "yes", 
            "Description": "Send all Container logs to CloudWatch", 
            "Type": "String"
        }, 
        "EnableSystemPrune": {
            "AllowedValues": [
                "no", 
                "yes"
            ], 
            "Default": "no", 
            "Description": "Cleans up unused images, containers, networks and volumes", 
            "Type": "String"
        }, 
        "InstanceType": {
            "AllowedValues": [
                "t2.micro", 
                "t2.small", 
                "t2.medium", 
                "t2.large", 
                "t2.xlarge", 
                "t2.2xlarge", 
                "m4.large", 
                "m4.xlarge", 
                "m4.2xlarge", 
                "m4.4xlarge", 
                "m4.10xlarge", 
                "m3.medium", 
                "m3.large", 
                "m3.xlarge", 
                "m3.2xlarge", 
                "c4.large", 
                "c4.xlarge", 
                "c4.2xlarge", 
                "c4.4xlarge", 
                "c4.8xlarge", 
                "c3.large", 
                "c3.xlarge", 
                "c3.2xlarge", 
                "c3.4xlarge", 
                "c3.8xlarge", 
                "r3.large", 
                "r3.xlarge", 
                "r3.2xlarge", 
                "r3.4xlarge", 
                "r3.8xlarge", 
                "i2.xlarge", 
                "i2.2xlarge", 
                "i2.4xlarge", 
                "i2.8xlarge"
            ], 
            "ConstraintDescription": "Must be a valid EC2 HVM instance type.", 
            "Default": "t2.micro", 
            "Description": "EC2 HVM instance type (t2.micro, m3.medium, etc).", 
            "Type": "String"
        }, 
        "KeyName": {
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair.", 
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances", 
            "MinLength": "1", 
            "Type": "AWS::EC2::KeyPair::KeyName"
        }, 
        "ManagerDiskSize": {
            "Default": "20", 
            "Description": "Size of Manager's ephemeral storage volume in GiB", 
            "MaxValue": "1024", 
            "MinValue": "20", 
            "Type": "Number"
        }, 
        "ManagerDiskType": {
            "AllowedValues": [
                "standard", 
                "gp2"
            ], 
            "Default": "standard", 
            "Description": "Manager ephemeral storage volume type", 
            "Type": "String"
        }, 
        "ManagerInstanceType": {
            "AllowedValues": [
                "t2.micro", 
                "t2.small", 
                "t2.medium", 
                "t2.large", 
                "t2.xlarge", 
                "t2.2xlarge", 
                "m4.large", 
                "m4.xlarge", 
                "m4.2xlarge", 
                "m4.4xlarge", 
                "m4.10xlarge", 
                "m3.medium", 
                "m3.large", 
                "m3.xlarge", 
                "m3.2xlarge", 
                "c4.large", 
                "c4.xlarge", 
                "c4.2xlarge", 
                "c4.4xlarge", 
                "c4.8xlarge", 
                "c3.large", 
                "c3.xlarge", 
                "c3.2xlarge", 
                "c3.4xlarge", 
                "c3.8xlarge", 
                "r3.large", 
                "r3.xlarge", 
                "r3.2xlarge", 
                "r3.4xlarge", 
                "r3.8xlarge", 
                "i2.xlarge", 
                "i2.2xlarge", 
                "i2.4xlarge", 
                "i2.8xlarge"
            ], 
            "ConstraintDescription": "Must be a valid EC2 HVM instance type.", 
            "Default": "t2.micro", 
            "Description": "EC2 HVM instance type (t2.micro, m3.medium, etc).", 
            "Type": "String"
        }, 
        "ManagerSize": {
            "AllowedValues": [
                "1", 
                "3", 
                "5"
            ], 
            "Default": "3", 
            "Description": "Number of Swarm manager nodes (1, 3, 5)", 
            "Type": "Number"
        }, 
        "WorkerDiskSize": {
            "Default": "20", 
            "Description": "Size of Workers's ephemeral storage volume in GiB", 
            "MaxValue": "1024", 
            "MinValue": "20", 
            "Type": "Number"
        }, 
        "WorkerDiskType": {
            "AllowedValues": [
                "standard", 
                "gp2"
            ], 
            "Default": "standard", 
            "Description": "Worker ephemeral storage volume type", 
            "Type": "String"
        }
    }, 
    "Resources": {
        "AttachGateway": {
            "DependsOn": [
                "Vpc", 
                "InternetGateway"
            ], 
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }, 
                "VpcId": {
                    "Ref": "Vpc"
                }
            }, 
            "Type": "AWS::EC2::VPCGatewayAttachment"
        }, 
        "DockerLogGroup": {
            "Condition": "CreateLogResources", 
            "Properties": {
                "LogGroupName": {
                    "Fn::Join": [
                        "-", 
                        [
                            {
                                "Ref": "AWS::StackName"
                            }, 
                            "lg"
                        ]
                    ]
                }, 
                "RetentionInDays": 7
            }, 
            "Type": "AWS::Logs::LogGroup"
        }, 
        "DynDBPolicies": {
            "DependsOn": [
                "ProxyRole", 
                "SwarmDynDBTable"
            ], 
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "dynamodb:PutItem", 
                                "dynamodb:DeleteItem", 
                                "dynamodb:GetItem", 
                                "dynamodb:UpdateItem", 
                                "dynamodb:Query"
                            ], 
                            "Effect": "Allow", 
                            "Resource": {
                                "Fn::Join": [
                                    "", 
                                    [
                                        "arn:aws:dynamodb:", 
                                        {
                                            "Ref": "AWS::Region"
                                        }, 
                                        ":", 
                                        {
                                            "Ref": "AWS::AccountId"
                                        }, 
                                        ":table/", 
                                        {
                                            "Ref": "SwarmDynDBTable"
                                        }
                                    ]
                                ]
                            }
                        }
                    ], 
                    "Version": "2012-10-17"
                }, 
                "PolicyName": "dyndb-getput", 
                "Roles": [
                    {
                        "Ref": "ProxyRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Policy"
        }, 
        "ExternalLoadBalancer": {
            "DependsOn": [
                "AttachGateway", 
                "ExternalLoadBalancerSG", 
                "PubSubnetAz1", 
                "PubSubnetAz2", 
                "PubSubnetAz3"
            ], 
            "Properties": {
                "ConnectionSettings": {
                    "IdleTimeout": "600"
                }, 
                "CrossZone": "true", 
                "HealthCheck": {
                    "HealthyThreshold": "2", 
                    "Interval": "10", 
                    "Target": "HTTP:44554/", 
                    "Timeout": "2", 
                    "UnhealthyThreshold": "4"
                }, 
                "Listeners": [
                    {
                        "InstancePort": "7", 
                        "LoadBalancerPort": "7", 
                        "Protocol": "TCP"
                    }
                ], 
                "LoadBalancerName": {
                    "Fn::Join": [
                        "-", 
                        [
                            {
                                "Ref": "AWS::StackName"
                            }, 
                            "ELB"
                        ]
                    ]
                }, 
                "SecurityGroups": [
                    {
                        "Ref": "ExternalLoadBalancerSG"
                    }
                ], 
                "Subnets": {
                    "Fn::If": [
                        "HasOnly2AZs", 
                        [
                            {
                                "Ref": "PubSubnetAz1"
                            }, 
                            {
                                "Ref": "PubSubnetAz2"
                            }
                        ], 
                        [
                            {
                                "Ref": "PubSubnetAz1"
                            }, 
                            {
                                "Ref": "PubSubnetAz2"
                            }, 
                            {
                                "Ref": "PubSubnetAz3"
                            }
                        ]
                    ]
                }, 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": {
                            "Fn::Join": [
                                "-", 
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    }, 
                                    "ELB"
                                ]
                            ]
                        }
                    }
                ]
            }, 
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        }, 
        "ExternalLoadBalancerSG": {
            "DependsOn": "Vpc", 
            "Properties": {
                "GroupDescription": "External Load Balancer SecurityGroup", 
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "Vpc"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "InternetGateway": {
            "DependsOn": "Vpc", 
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": {
                            "Fn::Join": [
                                "-", 
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    }, 
                                    "IGW"
                                ]
                            ]
                        }
                    }
                ]
            }, 
            "Type": "AWS::EC2::InternetGateway"
        }, 
        "ManagerAsg": {
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "ManagerSize"
                    }, 
                    "Timeout": "PT20M"
                }
            }, 
            "DependsOn": [
                "SwarmDynDBTable", 
                "PubSubnetAz1", 
                "PubSubnetAz2", 
                "PubSubnetAz3", 
                "ExternalLoadBalancer"
            ], 
            "Properties": {
                "DesiredCapacity": {
                    "Ref": "ManagerSize"
                }, 
                "HealthCheckGracePeriod": "300", 
                "HealthCheckType": "ELB", 
                "LaunchConfigurationName": {
                    "Ref": "ManagerLaunchConfigGa2"
                }, 
                "LoadBalancerNames": [
                    {
                        "Ref": "ExternalLoadBalancer"
                    }
                ], 
                "MaxSize": "5", 
                "MinSize": "0", 
                "Tags": [
                    {
                        "Key": "Name", 
                        "PropagateAtLaunch": "true", 
                        "Value": {
                            "Fn::Join": [
                                "-", 
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    }, 
                                    "Manager"
                                ]
                            ]
                        }
                    }, 
                    {
                        "Key": "swarm-node-type", 
                        "PropagateAtLaunch": "true", 
                        "Value": "manager"
                    }, 
                    {
                        "Key": "swarm-stack-id", 
                        "PropagateAtLaunch": "true", 
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }, 
                    {
                        "Key": "DOCKER_FOR_AWS_VERSION", 
                        "PropagateAtLaunch": "true", 
                        "Value": {
                            "Fn::FindInMap": [
                                "DockerForAWS", 
                                "version", 
                                "forAws"
                            ]
                        }
                    }, 
                    {
                        "Key": "DOCKER_VERSION", 
                        "PropagateAtLaunch": "true", 
                        "Value": {
                            "Fn::FindInMap": [
                                "DockerForAWS", 
                                "version", 
                                "docker"
                            ]
                        }
                    }, 
                    {
                        "Key": "CHANNEL", 
                        "PropagateAtLaunch": "true", 
                        "Value": {
                            "Fn::FindInMap": [
                                "DockerForAWS", 
                                "version", 
                                "channel"
                            ]
                        }
                    }
                ], 
                "VPCZoneIdentifier": [
                    {
                        "Fn::If": [
                            "HasOnly2AZs", 
                            {
                                "Fn::Join": [
                                    ",", 
                                    [
                                        {
                                            "Ref": "PubSubnetAz1"
                                        }, 
                                        {
                                            "Ref": "PubSubnetAz2"
                                        }
                                    ]
                                ]
                            }, 
                            {
                                "Fn::Join": [
                                    ",", 
                                    [
                                        {
                                            "Ref": "PubSubnetAz1"
                                        }, 
                                        {
                                            "Ref": "PubSubnetAz2"
                                        }, 
                                        {
                                            "Ref": "PubSubnetAz3"
                                        }
                                    ]
                                ]
                            }
                        ]
                    }
                ]
            }, 
            "Type": "AWS::AutoScaling::AutoScalingGroup", 
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MaxBatchSize": "1", 
                    "MinInstancesInService": {
                        "Ref": "ManagerSize"
                    }, 
                    "PauseTime": "PT20M", 
                    "WaitOnResourceSignals": "true"
                }
            }
        }, 
        "ManagerLaunchConfigGa2": {
            "DependsOn": "ExternalLoadBalancer", 
            "Properties": {
                "AssociatePublicIpAddress": "true", 
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdb", 
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "ManagerDiskSize"
                            }, 
                            "VolumeType": {
                                "Ref": "ManagerDiskType"
                            }
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "ProxyInstanceProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch", 
                                {
                                    "Ref": "ManagerInstanceType"
                                }, 
                                "Arch"
                            ]
                        }
                    ]
                }, 
                "InstanceType": {
                    "Ref": "ManagerInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "SecurityGroups": [
                    {
                        "Ref": "ManagerVpcSG"
                    }, 
                    {
                        "Ref": "SwarmWideSG"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/sh\n", 
                                "echo \"", 
                                {
                                    "Ref": "ExternalLoadBalancer"
                                }, 
                                "\" > /var/lib/docker/swarm/lb_name\n", 
                                "echo \"# hostname : ELB_name\" >> /var/lib/docker/swarm/elb.config\n", 
                                "echo \"127.0.0.1: ", 
                                {
                                    "Ref": "ExternalLoadBalancer"
                                }, 
                                "\" >> /var/lib/docker/swarm/elb.config\n", 
                                "echo \"localhost: ", 
                                {
                                    "Ref": "ExternalLoadBalancer"
                                }, 
                                "\" >> /var/lib/docker/swarm/elb.config\n", 
                                "echo \"default: ", 
                                {
                                    "Ref": "ExternalLoadBalancer"
                                }, 
                                "\" >> /var/lib/docker/swarm/elb.config\n", 
                                "export DOCKER_FOR_IAAS_VERSION='", 
                                {
                                    "Fn::FindInMap": [
                                        "DockerForAWS", 
                                        "version", 
                                        "forAws"
                                    ]
                                }, 
                                "'\n", 
                                "export CHANNEL='", 
                                {
                                    "Fn::FindInMap": [
                                        "DockerForAWS", 
                                        "version", 
                                        "channel"
                                    ]
                                }, 
                                "'\n", 
                                "export LOCAL_IP=$(wget -qO- http://169.254.169.254/latest/meta-data/local-ipv4)\n", 
                                "export ENABLE_CLOUDWATCH_LOGS='", 
                                {
                                    "Ref": "EnableCloudWatchLogs"
                                }, 
                                "'\n", 
                                "if [ $ENABLE_CLOUDWATCH_LOGS == 'yes' ] ; then \n", 
                                "echo '{\"experimental\": true, \"log-driver\": \"awslogs\",\"log-opts\": {\"awslogs-group\":\"", 
                                {
                                    "Fn::Join": [
                                        "-", 
                                        [
                                            {
                                                "Ref": "AWS::StackName"
                                            }, 
                                            "lg"
                                        ]
                                    ]
                                }, 
                                "\", \"tag\": \"{{.Name}}-{{.ID}}\" }}' > /etc/docker/daemon.json \n", 
                                "else\n", 
                                "echo '{\"experimental\": true }' > /etc/docker/daemon.json \n", 
                                "fi\n", 
                                "chown -R docker /home/docker/\n", 
                                "chgrp -R docker /home/docker/\n", 
                                "rc-service docker restart\n", 
                                "sleep 5\n", 
                                "docker run --label com.docker.editions.system --log-driver=json-file --name=meta-aws --restart=always -d -p $LOCAL_IP:9024:8080 ", 
                                "-e AWS_REGION='", 
                                {
                                    "Ref": "AWS::Region"
                                }, 
                                "' ", 
                                "-e MANAGER_SECURITY_GROUP_ID='", 
                                {
                                    "Ref": "ManagerVpcSG"
                                }, 
                                "' ", 
                                "-e WORKER_SECURITY_GROUP_ID='", 
                                {
                                    "Ref": "NodeVpcSG"
                                }, 
                                "' ", 
                                "-v /var/run/docker.sock:/var/run/docker.sock ", 
                                "docker4x/meta-aws:$DOCKER_FOR_IAAS_VERSION metaserver -flavor=aws\n", 
                                "docker run --label com.docker.editions.system --log-driver=json-file --restart=no -d ", 
                                "-e DYNAMODB_TABLE='", 
                                {
                                    "Ref": "SwarmDynDBTable"
                                }, 
                                "' ", 
                                "-e NODE_TYPE='manager' ", 
                                "-e REGION='", 
                                {
                                    "Ref": "AWS::Region"
                                }, 
                                "' ", 
                                "-e STACK_NAME='", 
                                {
                                    "Ref": "AWS::StackName"
                                }, 
                                "' ", 
                                "-e STACK_ID='", 
                                {
                                    "Ref": "AWS::StackId"
                                }, 
                                "' ", 
                                "-e ACCOUNT_ID='", 
                                {
                                    "Ref": "AWS::AccountId"
                                }, 
                                "' ", 
                                "-e INSTANCE_NAME='ManagerAsg' ", 
                                "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION ", 
                                "-e CHANNEL=$CHANNEL ", 
                                "-v /var/run/docker.sock:/var/run/docker.sock ", 
                                "-v /usr/bin/docker:/usr/bin/docker ", 
                                "-v /var/log:/var/log ", 
                                "docker4x/init-aws:$DOCKER_FOR_IAAS_VERSION\n", 
                                "docker run --label com.docker.editions.system --log-driver=json-file --name=guide-aws --restart=always -d ", 
                                "-e DYNAMODB_TABLE='", 
                                {
                                    "Ref": "SwarmDynDBTable"
                                }, 
                                "' ", 
                                "-e NODE_TYPE='manager' ", 
                                "-e REGION='", 
                                {
                                    "Ref": "AWS::Region"
                                }, 
                                "' ", 
                                "-e STACK_NAME='", 
                                {
                                    "Ref": "AWS::StackName"
                                }, 
                                "' ", 
                                "-e INSTANCE_NAME='ManagerAsg' ", 
                                "-e VPC_ID='", 
                                {
                                    "Ref": "Vpc"
                                }, 
                                "' ", 
                                "-e STACK_ID='", 
                                {
                                    "Ref": "AWS::StackId"
                                }, 
                                "' ", 
                                "-e ACCOUNT_ID='", 
                                {
                                    "Ref": "AWS::AccountId"
                                }, 
                                "' ", 
                                "-e SWARM_QUEUE='", 
                                {
                                    "Ref": "SwarmSQS"
                                }, 
                                "' ", 
                                "-e CLEANUP_QUEUE='", 
                                {
                                    "Ref": "SwarmSQSCleanup"
                                }, 
                                "' ", 
                                "-e RUN_VACUUM='", 
                                {
                                    "Ref": "EnableSystemPrune"
                                }, 
                                "' ", 
                                "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION ", 
                                "-e CHANNEL=$CHANNEL ", 
                                "-v /var/run/docker.sock:/var/run/docker.sock ", 
                                "-v /usr/bin/docker:/usr/bin/docker ", 
                                "docker4x/guide-aws:$DOCKER_FOR_IAAS_VERSION\n", 
                                "docker volume create --name sshkey\n", 
                                "docker run --label com.docker.editions.system --log-driver=json-file -ti --rm ", 
                                "--user root ", 
                                "-v sshkey:/etc/ssh ", 
                                "--entrypoint ssh-keygen ", 
                                "docker4x/shell-aws:$DOCKER_FOR_IAAS_VERSION ", 
                                "-A\n", 
                                "docker run --label com.docker.editions.system --log-driver=json-file --name=shell-aws --restart=always -d -p 22:22 ", 
                                "-v /home/docker/:/home/docker/ ", 
                                "-v /var/run/docker.sock:/var/run/docker.sock ", 
                                "-v /var/lib/docker/swarm/lb_name:/var/lib/docker/swarm/lb_name:ro ", 
                                "-v /var/lib/docker/swarm/elb.config:/var/lib/docker/swarm/elb.config ", 
                                "-v /usr/bin/docker:/usr/bin/docker ", 
                                "-v /var/log:/var/log ", 
                                "-v sshkey:/etc/ssh ", 
                                "-v /etc/passwd:/etc/passwd:ro ", 
                                "-v /etc/shadow:/etc/shadow:ro ", 
                                "-v /etc/group:/etc/group:ro ", 
                                "docker4x/shell-aws:$DOCKER_FOR_IAAS_VERSION\n", 
                                "docker run --label com.docker.editions.system --log-driver=json-file --name=l4controller-aws --restart=always -d ", 
                                "-v /var/run/docker.sock:/var/run/docker.sock ", 
                                "-v /var/lib/docker/swarm:/var/lib/docker/swarm ", 
                                "docker4x/l4controller-aws:$DOCKER_FOR_IAAS_VERSION run --log=4 --all=true\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        }, 
        "ManagerVpcSG": {
            "DependsOn": "NodeVpcSG", 
            "Properties": {
                "GroupDescription": "Manager SecurityGroup", 
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "22", 
                        "IpProtocol": "tcp", 
                        "ToPort": "22"
                    }, 
                    {
                        "FromPort": "2377", 
                        "IpProtocol": "tcp", 
                        "SourceSecurityGroupId": {
                            "Fn::GetAtt": [
                                "NodeVpcSG", 
                                "GroupId"
                            ]
                        }, 
                        "ToPort": "2377"
                    }, 
                    {
                        "FromPort": "4789", 
                        "IpProtocol": "udp", 
                        "SourceSecurityGroupId": {
                            "Fn::GetAtt": [
                                "NodeVpcSG", 
                                "GroupId"
                            ]
                        }, 
                        "ToPort": "4789"
                    }, 
                    {
                        "FromPort": "7946", 
                        "IpProtocol": "tcp", 
                        "SourceSecurityGroupId": {
                            "Fn::GetAtt": [
                                "NodeVpcSG", 
                                "GroupId"
                            ]
                        }, 
                        "ToPort": "7946"
                    }, 
                    {
                        "FromPort": "7946", 
                        "IpProtocol": "udp", 
                        "SourceSecurityGroupId": {
                            "Fn::GetAtt": [
                                "NodeVpcSG", 
                                "GroupId"
                            ]
                        }, 
                        "ToPort": "7946"
                    }
                ], 
                "VpcId": {
                    "Ref": "Vpc"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "NodeAsg": {
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "ClusterSize"
                    }, 
                    "Timeout": "PT2H"
                }
            }, 
            "DependsOn": "ManagerAsg", 
            "Properties": {
                "DesiredCapacity": {
                    "Ref": "ClusterSize"
                }, 
                "HealthCheckGracePeriod": "300", 
                "HealthCheckType": "ELB", 
                "LaunchConfigurationName": {
                    "Ref": "NodeLaunchConfigGa2"
                }, 
                "LoadBalancerNames": [
                    {
                        "Ref": "ExternalLoadBalancer"
                    }
                ], 
                "MaxSize": "1000", 
                "MinSize": "0", 
                "Tags": [
                    {
                        "Key": "Name", 
                        "PropagateAtLaunch": "true", 
                        "Value": {
                            "Fn::Join": [
                                "-", 
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    }, 
                                    "worker"
                                ]
                            ]
                        }
                    }, 
                    {
                        "Key": "swarm-node-type", 
                        "PropagateAtLaunch": "true", 
                        "Value": "worker"
                    }, 
                    {
                        "Key": "swarm-stack-id", 
                        "PropagateAtLaunch": "true", 
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }, 
                    {
                        "Key": "DOCKER_FOR_AWS_VERSION", 
                        "PropagateAtLaunch": "true", 
                        "Value": {
                            "Fn::FindInMap": [
                                "DockerForAWS", 
                                "version", 
                                "forAws"
                            ]
                        }
                    }, 
                    {
                        "Key": "DOCKER_VERSION", 
                        "PropagateAtLaunch": "true", 
                        "Value": {
                            "Fn::FindInMap": [
                                "DockerForAWS", 
                                "version", 
                                "docker"
                            ]
                        }
                    }, 
                    {
                        "Key": "CHANNEL", 
                        "PropagateAtLaunch": "true", 
                        "Value": {
                            "Fn::FindInMap": [
                                "DockerForAWS", 
                                "version", 
                                "channel"
                            ]
                        }
                    }
                ], 
                "VPCZoneIdentifier": [
                    {
                        "Fn::If": [
                            "HasOnly2AZs", 
                            {
                                "Fn::Join": [
                                    ",", 
                                    [
                                        {
                                            "Ref": "PubSubnetAz1"
                                        }, 
                                        {
                                            "Ref": "PubSubnetAz2"
                                        }
                                    ]
                                ]
                            }, 
                            {
                                "Fn::Join": [
                                    ",", 
                                    [
                                        {
                                            "Ref": "PubSubnetAz1"
                                        }, 
                                        {
                                            "Ref": "PubSubnetAz2"
                                        }, 
                                        {
                                            "Ref": "PubSubnetAz3"
                                        }
                                    ]
                                ]
                            }
                        ]
                    }
                ]
            }, 
            "Type": "AWS::AutoScaling::AutoScalingGroup", 
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MaxBatchSize": "1", 
                    "MinInstancesInService": {
                        "Ref": "ClusterSize"
                    }, 
                    "PauseTime": "PT1H", 
                    "WaitOnResourceSignals": "true"
                }
            }
        }, 
        "NodeLaunchConfigGa2": {
            "DependsOn": "ManagerAsg", 
            "Properties": {
                "AssociatePublicIpAddress": "true", 
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdb", 
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "WorkerDiskSize"
                            }, 
                            "VolumeType": {
                                "Ref": "WorkerDiskType"
                            }
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "ProxyInstanceProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch", 
                                {
                                    "Ref": "InstanceType"
                                }, 
                                "Arch"
                            ]
                        }
                    ]
                }, 
                "InstanceType": {
                    "Ref": "InstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "SecurityGroups": [
                    {
                        "Ref": "NodeVpcSG"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/sh\n", 
                                "export DOCKER_FOR_IAAS_VERSION='", 
                                {
                                    "Fn::FindInMap": [
                                        "DockerForAWS", 
                                        "version", 
                                        "forAws"
                                    ]
                                }, 
                                "'\n", 
                                "export ENABLE_CLOUDWATCH_LOGS='", 
                                {
                                    "Ref": "EnableCloudWatchLogs"
                                }, 
                                "'\n", 
                                "if [ $ENABLE_CLOUDWATCH_LOGS == 'yes' ] ; then \n", 
                                "echo '{\"experimental\": true, \"log-driver\": \"awslogs\",\"log-opts\": {\"awslogs-group\":\"", 
                                {
                                    "Fn::Join": [
                                        "-", 
                                        [
                                            {
                                                "Ref": "AWS::StackName"
                                            }, 
                                            "lg"
                                        ]
                                    ]
                                }, 
                                "\", \"tag\": \"{{.Name}}-{{.ID}}\" }}' > /etc/docker/daemon.json \n", 
                                "else\n", 
                                "echo '{\"experimental\": true }' > /etc/docker/daemon.json \n", 
                                "fi\n", 
                                "chown -R docker /home/docker/\n", 
                                "chgrp -R docker /home/docker/\n", 
                                "rc-service docker restart\n", 
                                "sleep 5\n", 
                                "docker run --label com.docker.editions.system --log-driver=json-file --restart=no -d ", 
                                "-e DYNAMODB_TABLE='", 
                                {
                                    "Ref": "SwarmDynDBTable"
                                }, 
                                "' ", 
                                "-e NODE_TYPE='worker' ", 
                                "-e REGION='", 
                                {
                                    "Ref": "AWS::Region"
                                }, 
                                "' ", 
                                "-e STACK_NAME='", 
                                {
                                    "Ref": "AWS::StackName"
                                }, 
                                "' ", 
                                "-e STACK_ID='", 
                                {
                                    "Ref": "AWS::StackId"
                                }, 
                                "' ", 
                                "-e ACCOUNT_ID='", 
                                {
                                    "Ref": "AWS::AccountId"
                                }, 
                                "' ", 
                                "-e INSTANCE_NAME='NodeAsg' ", 
                                "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION ", 
                                "-v /var/run/docker.sock:/var/run/docker.sock ", 
                                "-v /usr/bin/docker:/usr/bin/docker ", 
                                "-v /var/log:/var/log ", 
                                "docker4x/init-aws:$DOCKER_FOR_IAAS_VERSION\n", 
                                "docker volume create --name sshkey\n", 
                                "docker run --label com.docker.editions.system --log-driver=json-file -ti --rm ", 
                                "--user root ", 
                                "-v sshkey:/etc/ssh ", 
                                "--entrypoint ssh-keygen ", 
                                "docker4x/shell-aws:$DOCKER_FOR_IAAS_VERSION ", 
                                "-A\n", 
                                "docker run --label com.docker.editions.system --log-driver=json-file --name=shell-aws --restart=always -d -p 22:22 ", 
                                "-v /home/docker/:/home/docker/ ", 
                                "-v /var/run/docker.sock:/var/run/docker.sock ", 
                                "-v /usr/bin/docker:/usr/bin/docker ", 
                                "-v /var/log:/var/log ", 
                                "-v sshkey:/etc/ssh ", 
                                "-v /etc/passwd:/etc/passwd:ro ", 
                                "-v /etc/shadow:/etc/shadow:ro ", 
                                "-v /etc/group:/etc/group:ro ", 
                                "docker4x/shell-aws:$DOCKER_FOR_IAAS_VERSION\n", 
                                "docker run --label com.docker.editions.system --log-driver=json-file --name=guide-aws --restart=always -d ", 
                                "-e DYNAMODB_TABLE='", 
                                {
                                    "Ref": "SwarmDynDBTable"
                                }, 
                                "' ", 
                                "-e NODE_TYPE='worker' ", 
                                "-e REGION='", 
                                {
                                    "Ref": "AWS::Region"
                                }, 
                                "' ", 
                                "-e STACK_NAME='", 
                                {
                                    "Ref": "AWS::StackName"
                                }, 
                                "' ", 
                                "-e INSTANCE_NAME='NodeAsg' ", 
                                "-e VPC_ID='", 
                                {
                                    "Ref": "Vpc"
                                }, 
                                "' ", 
                                "-e STACK_ID='", 
                                {
                                    "Ref": "AWS::StackId"
                                }, 
                                "' ", 
                                "-e ACCOUNT_ID='", 
                                {
                                    "Ref": "AWS::AccountId"
                                }, 
                                "' ", 
                                "-e SWARM_QUEUE='", 
                                {
                                    "Ref": "SwarmSQS"
                                }, 
                                "' ", 
                                "-e CLEANUP_QUEUE='", 
                                {
                                    "Ref": "SwarmSQSCleanup"
                                }, 
                                "' ", 
                                "-e RUN_VACUUM='", 
                                {
                                    "Ref": "EnableSystemPrune"
                                }, 
                                "' ", 
                                "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION ", 
                                "-v /var/run/docker.sock:/var/run/docker.sock ", 
                                "-v /usr/bin/docker:/usr/bin/docker ", 
                                "docker4x/guide-aws:$DOCKER_FOR_IAAS_VERSION\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        }, 
        "NodeVpcSG": {
            "DependsOn": "Vpc", 
            "Properties": {
                "GroupDescription": "Node SecurityGroup", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "8", 
                        "IpProtocol": "icmp", 
                        "ToPort": "0"
                    }, 
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "0", 
                        "IpProtocol": "udp", 
                        "ToPort": "65535"
                    }, 
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "0", 
                        "IpProtocol": "tcp", 
                        "ToPort": "2374"
                    }, 
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "2376", 
                        "IpProtocol": "tcp", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "VpcCidrs", 
                                "vpc", 
                                "cidr"
                            ]
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "Vpc"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "ProxyInstanceProfile": {
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "ProxyRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "ProxyPolicies": {
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "elasticloadbalancing:*", 
                            "Effect": "Allow", 
                            "Resource": "*"
                        }
                    ], 
                    "Version": "2012-10-17"
                }, 
                "PolicyName": "elb-update", 
                "Roles": [
                    {
                        "Ref": "ProxyRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Policy"
        }, 
        "ProxyRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com", 
                                    "autoscaling.amazonaws.com"
                                ]
                            }
                        }
                    ], 
                    "Version": "2012-10-17"
                }, 
                "Path": "/"
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "PubSubnet1RouteTableAssociation": {
            "DependsOn": [
                "PubSubnetAz1", 
                "RouteViaIgw"
            ], 
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                }, 
                "SubnetId": {
                    "Ref": "PubSubnetAz1"
                }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        }, 
        "PubSubnet2RouteTableAssociation": {
            "DependsOn": [
                "PubSubnetAz2", 
                "RouteViaIgw"
            ], 
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                }, 
                "SubnetId": {
                    "Ref": "PubSubnetAz2"
                }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        }, 
        "PubSubnet3RouteTableAssociation": {
            "DependsOn": [
                "PubSubnetAz3", 
                "RouteViaIgw"
            ], 
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                }, 
                "SubnetId": {
                    "Ref": "PubSubnetAz3"
                }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        }, 
        "PubSubnetAz1": {
            "DependsOn": "Vpc", 
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        {
                            "Fn::FindInMap": [
                                "AWSRegion2AZ", 
                                {
                                    "Ref": "AWS::Region"
                                }, 
                                "AZ0"
                            ]
                        }, 
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                }, 
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "VpcCidrs", 
                        "pubsubnet1", 
                        "cidr"
                    ]
                }, 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": {
                            "Fn::Join": [
                                "-", 
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    }, 
                                    "Subnet1"
                                ]
                            ]
                        }
                    }
                ], 
                "VpcId": {
                    "Ref": "Vpc"
                }
            }, 
            "Type": "AWS::EC2::Subnet"
        }, 
        "PubSubnetAz2": {
            "DependsOn": "Vpc", 
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        {
                            "Fn::FindInMap": [
                                "AWSRegion2AZ", 
                                {
                                    "Ref": "AWS::Region"
                                }, 
                                "AZ1"
                            ]
                        }, 
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                }, 
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "VpcCidrs", 
                        "pubsubnet2", 
                        "cidr"
                    ]
                }, 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": {
                            "Fn::Join": [
                                "-", 
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    }, 
                                    "Subnet2"
                                ]
                            ]
                        }
                    }
                ], 
                "VpcId": {
                    "Ref": "Vpc"
                }
            }, 
            "Type": "AWS::EC2::Subnet"
        }, 
        "PubSubnetAz3": {
            "DependsOn": "Vpc", 
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        {
                            "Fn::FindInMap": [
                                "AWSRegion2AZ", 
                                {
                                    "Ref": "AWS::Region"
                                }, 
                                "AZ2"
                            ]
                        }, 
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                }, 
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "VpcCidrs", 
                        "pubsubnet3", 
                        "cidr"
                    ]
                }, 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": {
                            "Fn::Join": [
                                "-", 
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    }, 
                                    "Subnet3"
                                ]
                            ]
                        }
                    }
                ], 
                "VpcId": {
                    "Ref": "Vpc"
                }
            }, 
            "Type": "AWS::EC2::Subnet"
        }, 
        "PublicRouteViaIgw": {
            "DependsOn": [
                "AttachGateway", 
                "RouteViaIgw"
            ], 
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0", 
                "GatewayId": {
                    "Ref": "InternetGateway"
                }, 
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                }
            }, 
            "Type": "AWS::EC2::Route"
        }, 
        "RouteViaIgw": {
            "DependsOn": "Vpc", 
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": {
                            "Fn::Join": [
                                "-", 
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    }, 
                                    "RT"
                                ]
                            ]
                        }
                    }
                ], 
                "VpcId": {
                    "Ref": "Vpc"
                }
            }, 
            "Type": "AWS::EC2::RouteTable"
        }, 
        "SwarmAPIPolicy": {
            "DependsOn": "ProxyRole", 
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "ec2:DescribeInstances", 
                                "ec2:DescribeVpcAttribute", 
                                "logs:CreateLogStream", 
                                "logs:PutLogEvents"
                            ], 
                            "Effect": "Allow", 
                            "Resource": "*"
                        }
                    ], 
                    "Version": "2012-10-17"
                }, 
                "PolicyName": "swarm-policy", 
                "Roles": [
                    {
                        "Ref": "ProxyRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Policy"
        }, 
        "SwarmAutoscalePolicy": {
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "autoscaling:*", 
                            "Effect": "Allow", 
                            "Resource": "*"
                        }
                    ], 
                    "Version": "2012-10-17"
                }, 
                "PolicyName": "swarm-autoscale-policy", 
                "Roles": [
                    {
                        "Ref": "ProxyRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Policy"
        }, 
        "SwarmDynDBTable": {
            "DependsOn": "ExternalLoadBalancer", 
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "node_type", 
                        "AttributeType": "S"
                    }
                ], 
                "KeySchema": [
                    {
                        "AttributeName": "node_type", 
                        "KeyType": "HASH"
                    }
                ], 
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1, 
                    "WriteCapacityUnits": 1
                }, 
                "TableName": {
                    "Fn::Join": [
                        "-", 
                        [
                            {
                                "Ref": "AWS::StackName"
                            }, 
                            "dyndbtable"
                        ]
                    ]
                }
            }, 
            "Type": "AWS::DynamoDB::Table"
        }, 
        "SwarmManagerUpgradeHook": {
            "DependsOn": "SwarmSQS", 
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "ManagerAsg"
                }, 
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING", 
                "NotificationTargetARN": {
                    "Fn::GetAtt": [
                        "SwarmSQS", 
                        "Arn"
                    ]
                }, 
                "RoleARN": {
                    "Fn::GetAtt": [
                        "ProxyRole", 
                        "Arn"
                    ]
                }
            }, 
            "Type": "AWS::AutoScaling::LifecycleHook"
        }, 
        "SwarmSQS": {
            "Properties": {
                "MessageRetentionPeriod": 43200, 
                "ReceiveMessageWaitTimeSeconds": 10
            }, 
            "Type": "AWS::SQS::Queue"
        }, 
        "SwarmSQSCleanup": {
            "Properties": {
                "MessageRetentionPeriod": 43200, 
                "ReceiveMessageWaitTimeSeconds": 10
            }, 
            "Type": "AWS::SQS::Queue"
        }, 
        "SwarmSQSCleanupPolicy": {
            "DependsOn": [
                "ProxyRole", 
                "SwarmSQSCleanup"
            ], 
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sqs:*", 
                            "Effect": "Allow", 
                            "Resource": {
                                "Fn::GetAtt": [
                                    "SwarmSQSCleanup", 
                                    "Arn"
                                ]
                            }
                        }
                    ], 
                    "Version": "2012-10-17"
                }, 
                "PolicyName": "swarm-sqs-cleanup-policy", 
                "Roles": [
                    {
                        "Ref": "ProxyRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Policy"
        }, 
        "SwarmSQSPolicy": {
            "DependsOn": [
                "ProxyRole", 
                "SwarmSQS"
            ], 
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sqs:*", 
                            "Effect": "Allow", 
                            "Resource": {
                                "Fn::GetAtt": [
                                    "SwarmSQS", 
                                    "Arn"
                                ]
                            }
                        }
                    ], 
                    "Version": "2012-10-17"
                }, 
                "PolicyName": "swarm-sqs-policy", 
                "Roles": [
                    {
                        "Ref": "ProxyRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Policy"
        }, 
        "SwarmWideSG": {
            "DependsOn": "Vpc", 
            "Properties": {
                "GroupDescription": "Swarm wide access", 
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "VpcCidrs", 
                                "vpc", 
                                "cidr"
                            ]
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "Vpc"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "SwarmWorkerUpgradeHook": {
            "DependsOn": "SwarmSQS", 
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "NodeAsg"
                }, 
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING", 
                "NotificationTargetARN": {
                    "Fn::GetAtt": [
                        "SwarmSQS", 
                        "Arn"
                    ]
                }, 
                "RoleARN": {
                    "Fn::GetAtt": [
                        "ProxyRole", 
                        "Arn"
                    ]
                }
            }, 
            "Type": "AWS::AutoScaling::LifecycleHook"
        }, 
        "Vpc": {
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "VpcCidrs", 
                        "vpc", 
                        "cidr"
                    ]
                }, 
                "EnableDnsHostnames": "true", 
                "EnableDnsSupport": "true", 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": {
                            "Fn::Join": [
                                "-", 
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    }, 
                                    "VPC"
                                ]
                            ]
                        }
                    }
                ]
            }, 
            "Type": "AWS::EC2::VPC"
        }
    }
}