###### JOBS #######

jobs:
- name: build-docker-app_compose
  public: ((concourse-public))
  serial: ((concourse-serial))
  serial_groups: ((concourse-compose-serial_groups))
  plan:
  - get: docker-dz_compose
    trigger: ((concourse-compose-trigger))
  - get: github-repo-app_compose
    trigger: ((concourse-compose-trigger))
  - task: complete_dockerfiles
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-dz_compose-repository))
          tag: ((docker-dz_compose-tag))((docker-additional-tag))
      inputs:
      - name: github-repo-app_compose
      outputs:
      - name: complete_dockerfiles
      run:
        path: sh
        args:
        - -exc
        - |
          mkdir -p complete_dockerfiles/((github-app_compose-path))
          cp -R github-repo-app_compose/((github-app_compose-path))/* complete_dockerfiles/((github-app_compose-path))/
          cp github-repo-app_compose/((github-app_compose-path))/properties/*.yml /templater/properties/
          cd /templater/
          ./complete_templates.sh /tmp/build/*/complete_dockerfiles
  - put: docker-app_compose
    params:
      build: complete_dockerfiles/((docker-app_compose-dockerfile-path))

- name: build-docker-app_inject
  public: ((concourse-public))
  serial: ((concourse-serial))
  serial_groups: ((concourse-app-serial_groups))
  plan:
  - aggregate:
    - get: docker-app_compose
      passed: [build-docker-app_compose]
      trigger: ((concourse-trigger))
    - get: github-repo-app_inject
      trigger: ((concourse-trigger))
  - task: complete_dockerfiles
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-app_compose-repository))
          tag: ((docker-app_compose-tag))((docker-additional-tag))
      inputs:
      - name: github-repo-app_inject
      outputs:
      - name: complete_dockerfiles
      run:
        path: sh
        args:
        - -exc
        - |
          mkdir -p complete_dockerfiles/((github-app_inject-path))
          cp -R github-repo-app_inject/((github-app_inject-path))/* complete_dockerfiles/((github-app_inject-path))/
          cd /templater/
          ./complete_templates.sh /tmp/build/*/complete_dockerfiles
  - put: docker-app_inject
    params:
      build: complete_dockerfiles/((docker-app_inject-dockerfile-path))

- name: build-docker-app_cassandra
  public: ((concourse-public))
  serial: ((concourse-serial))
  serial_groups: ((concourse-app-serial_groups))
  plan:
  - aggregate:
    - get: docker-app_compose
      passed: [build-docker-app_compose]
      trigger: ((concourse-trigger))
    - get: github-repo-app_cassandra
      trigger: ((concourse-trigger))
    - get: docker-dz_cassandra
      trigger: ((concourse-trigger))
  - task: complete_dockerfiles
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-app_compose-repository))
          tag: ((docker-app_compose-tag))((docker-additional-tag))
      inputs:
      - name: github-repo-app_cassandra
      outputs:
      - name: complete_dockerfiles
      run:
        path: sh
        args:
        - -exc
        - |
          mkdir -p complete_dockerfiles/((github-app_cassandra-path))
          cp -R github-repo-app_cassandra/((github-app_cassandra-path))/* complete_dockerfiles/((github-app_cassandra-path))/
          cd /templater/
          ./complete_templates.sh /tmp/build/*/complete_dockerfiles
  - put: docker-app_cassandra
    params:
      build: complete_dockerfiles/((docker-app_cassandra-dockerfile-path))

- name: build-docker-app_streaming
  public: ((concourse-public))
  serial: ((concourse-serial))
  serial_groups: ((concourse-app-serial_groups))
  plan:
  - aggregate:
    - get: docker-app_compose
      passed: [build-docker-app_compose]
      trigger: ((concourse-trigger))
    - get: github-repo-app_streaming
      trigger: ((concourse-trigger))
  - task: complete_dockerfiles
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-app_compose-repository))
          tag: ((docker-app_compose-tag))((docker-additional-tag))
      inputs:
      - name: github-repo-app_streaming
      outputs:
      - name: complete_dockerfiles
      run:
        path: sh
        args:
        - -exc
        - |
          mkdir -p complete_dockerfiles/((github-app_streaming-path))
          cp -R github-repo-app_streaming/((github-app_streaming-path))/* complete_dockerfiles/((github-app_streaming-path))/
          cd /templater/
          ./complete_templates.sh /tmp/build/*/complete_dockerfiles
  - put: docker-app_streaming
    params:
      build: complete_dockerfiles/((docker-app_streaming-dockerfile-path))

- name: build-docker-app_monitor
  public: ((concourse-public))
  serial: ((concourse-serial))
  serial_groups: ((concourse-app-serial_groups))
  plan:
  - aggregate:
    - get: docker-app_compose
      passed: [build-docker-app_compose]
      trigger: ((concourse-trigger))
    - get: github-repo-app_monitor
      trigger: ((concourse-trigger))
  - task: complete_dockerfiles
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-app_compose-repository))
          tag: ((docker-app_compose-tag))((docker-additional-tag))
      inputs:
      - name: github-repo-app_monitor
      outputs:
      - name: complete_dockerfiles
      run:
        path: sh
        args:
        - -exc
        - |
          mkdir -p complete_dockerfiles/((github-app_monitor-path))
          cp -R github-repo-app_monitor/((github-app_monitor-path))/* complete_dockerfiles/((github-app_monitor-path))/
          cd /templater/
          ./complete_templates.sh /tmp/build/*/complete_dockerfiles
  - put: docker-app_monitor
    params:
      build: complete_dockerfiles/((docker-app_monitor-dockerfile-path))

- name: build-docker-app_telegraf
  public: ((concourse-public))
  serial: ((concourse-serial))
  serial_groups: ((concourse-app-serial_groups))
  plan:
  - aggregate:
    - get: docker-app_compose
      passed: [build-docker-app_compose]
      trigger: ((concourse-trigger))
    - get: docker-dz_telegraf
      trigger: ((concourse-trigger))
    - get: github-repo-app_telegraf
      trigger: ((concourse-trigger))
  - task: complete_dockerfiles
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-app_compose-repository))
          tag: ((docker-app_compose-tag))((docker-additional-tag))
      inputs:
      - name: github-repo-app_telegraf
      outputs:
      - name: complete_dockerfiles
      run:
        path: sh
        args:
        - -exc
        - |
          mkdir -p complete_dockerfiles/((github-app_telegraf-path))
          cp -R github-repo-app_telegraf/((github-app_telegraf-path))/* complete_dockerfiles/((github-app_telegraf-path))/
          cd /templater/
          ./complete_templates.sh /tmp/build/*/complete_dockerfiles
  - put: docker-app_telegraf
    params:
      build: complete_dockerfiles/((docker-app_telegraf-dockerfile-path))

- name: build-docker-app_prometheus
  public: ((concourse-public))
  serial: ((concourse-serial))
  serial_groups: ((concourse-app-serial_groups))
  plan:
  - aggregate:
    - get: docker-app_compose
      passed: [build-docker-app_compose]
      trigger: ((concourse-trigger))
    - get: docker-dz_prometheus
      trigger: ((concourse-trigger))
    - get: github-repo-app_prometheus
      trigger: ((concourse-trigger))
  - task: complete_dockerfiles
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-app_compose-repository))
          tag: ((docker-app_compose-tag))((docker-additional-tag))
      inputs:
      - name: github-repo-app_prometheus
      outputs:
      - name: complete_dockerfiles
      run:
        path: sh
        args:
        - -exc
        - |
          mkdir -p complete_dockerfiles/((github-app_prometheus-path))
          cp -R github-repo-app_prometheus/((github-app_prometheus-path))/* complete_dockerfiles/((github-app_prometheus-path))/
          cd /templater/
          ./complete_templates.sh /tmp/build/*/complete_dockerfiles
  - put: docker-app_prometheus
    params:
      build: complete_dockerfiles/((docker-app_prometheus-dockerfile-path))

###### RESOURCES ######

## Github Repositories ##

resources:
- name: github-repo-app_compose
  type: git
  source:
    uri: ((github-uri))
    branch: ((github-branch))
    paths:
      - ((github-app_compose-path))/**
    git_user: ((github-username))
    private_key: ((github-private-key))

- name: github-repo-app_inject
  type: git
  source:
    uri: ((github-uri))
    branch: ((github-branch))
    paths:
      - ((github-app_inject-path))/**
    git_user: ((github-username))
    private_key: ((github-private-key))

- name: github-repo-app_cassandra
  type: git
  source:
    uri: ((github-uri))
    branch: ((github-branch))
    paths:
      - ((github-app_cassandra-path))/**
    git_user: ((github-username))
    private_key: ((github-private-key))

- name: github-repo-app_streaming
  type: git
  source:
    uri: ((github-uri))
    branch: ((github-branch))
    paths:
      - ((github-app_streaming-path))/**
    git_user: ((github-username))
    private_key: ((github-private-key))

- name: github-repo-app_monitor
  type: git
  source:
    uri: ((github-uri))
    branch: ((github-branch))
    paths:
      - ((github-app_monitor-path))/**
    git_user: ((github-username))
    private_key: ((github-private-key))

- name: github-repo-app_telegraf
  type: git
  source:
    uri: ((github-uri))
    branch: ((github-branch))
    paths:
      - ((github-app_telegraf-path))/**
    git_user: ((github-username))
    private_key: ((github-private-key))

- name: github-repo-app_prometheus
  type: git
  source:
    uri: ((github-uri))
    branch: ((github-branch))
    paths:
      - ((github-app_prometheus-path))/**
    git_user: ((github-username))
    private_key: ((github-private-key))

## Deetazilla Docker Images ##

- name: docker-dz_compose
  type: docker-image
  source:
#    email: ((docker-hub-email))
#    username: ((docker-hub-username))
#    password: ((docker-hub-password))
    repository: ((docker-dz_compose-repository))
    tag: ((docker-dz_compose-tag))((docker-additional-tag))

- name: docker-dz_cassandra
  type: docker-image
  source:
    email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-dz_cassandra-repository))
    tag: ((docker-dz_cassandra-tag))((docker-additional-tag))

- name: docker-dz_telegraf
  type: docker-image
  source:
    email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-dz_telegraf-repository))
    tag: ((docker-dz_telegraf-tag))((docker-additional-tag))

- name: docker-dz_prometheus
  type: docker-image
  source:
    email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-dz_prometheus-repository))
    tag: ((docker-dz_prometheus-tag))((docker-additional-tag))

## Smart Meter Application Docker Images ##

- name: docker-app_compose
  type: docker-image
  source:
    email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-app_compose-repository))
    tag: ((docker-app_compose-tag))((docker-additional-tag))

- name: docker-app_inject
  type: docker-image
  source:
    email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-app_inject-repository))
    tag: ((docker-app_inject-tag))((docker-additional-tag))

- name: docker-app_cassandra
  type: docker-image
  source:
    email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-app_cassandra-repository))
    tag: ((docker-app_cassandra-tag))((docker-additional-tag))

- name: docker-app_streaming
  type: docker-image
  source:
    email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-app_streaming-repository))
    tag: ((docker-app_streaming-tag))((docker-additional-tag))

- name: docker-app_monitor
  type: docker-image
  source:
    email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-app_monitor-repository))
    tag: ((docker-app_monitor-tag))((docker-additional-tag))

- name: docker-app_telegraf
  type: docker-image
  source:
    email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-app_telegraf-repository))
    tag: ((docker-app_telegraf-tag))((docker-additional-tag))

- name: docker-app_prometheus
  type: docker-image
  source:
    email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-app_prometheus-repository))
    tag: ((docker-app_prometheus-tag))((docker-additional-tag))

